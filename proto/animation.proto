syntax = "proto2";

import "audio.proto";
import "primitives.proto";

package troll;

// Animations for a sprite.
message SpriteAnimation {
  repeated AnimationScript script = 1;
}

// A composition of animations that make a logical sequence.
message AnimationScript {
  optional string id = 1;

  // Animations that are part of the script. Animations are performed
  // sequentially, one after the other.
  repeated Animation animation = 2;

  // Number of times the script will be performed.
  optional int32 repeat = 3 [default = 1];
}

// All animations that are instantiated in this proto are performed on parallel.
message Animation {
  // If an animation is named with an id, an event will be emitted when this
  // part terminates. The event format is
  // "<scene_node_id>.<script_id>.<id>.done".
  optional string id = 1;

  enum TerminationCondition {
    ANY = 0;
    ALL = 1;
  }
  // If termination is ANY then a composite animation finishes if any of its
  // parts finishe. If the termination is ALL the animation finishes when all of
  // its parts are done. When termination is ALL finished parts do not continue
  // to execute while the unfinished are still running.
  optional TerminationCondition termination = 2 [default = ANY];

  // Repeatable animations.
  optional VectorAnimation translation = 3;
  optional VectorAnimation rotation = 4;
  optional VectorAnimation scaling = 5;
  optional FrameRangeAnimation frame_range = 6;
  optional FrameListAnimation frame_list = 7;
  optional FlashAnimation flash = 8;

  // Non-repeatable animations.
  optional GotoAnimation go_to = 9;
  optional TimerAnimation timer = 10;

  // Instant execution animations.
  optional RunScriptAnimation run_script = 11;
  optional SfxAnimation sfx = 12;
}

// A vector based transformation (e.g. translation) that is a pplied on a node
// after the specified delay.
message VectorAnimation {
  optional Vector vec = 1;
  optional int32 delay = 2;
  optional int32 repeat = 3;
}

enum VerticalAlign {
  TOP = 0;
  BOTTOM = 1;
  VCENTRE = 2;
}

enum HorizontalAlign {
  LEFT = 0;
  RIGHT = 1;
  HCENTRE = 2;
}

// Animation of frames in the [start, end) range. The start frame is applied
// immediately to the scene node. The consequent frames are applied after the
// specified delay.
message FrameRangeAnimation {
  optional int32 start_frame = 1;
  optional int32 end_frame = 2;
  optional int32 delay = 3;
  optional int32 repeat = 4;

  optional VerticalAlign vertical_align = 5;
  optional HorizontalAlign horizontal_align = 6;
}

// Animation of frames in the order specified. The start frame is applied
// immediately to the scene node. The consequent frames are applied after the
// specified delay.
message FrameListAnimation {
  repeated int32 frame = 1;
  optional int32 delay = 2;
  optional int32 repeat = 3;

  optional VerticalAlign vertical_align = 4;
  optional HorizontalAlign horizontal_align = 5;
}

// Animation that makes a scene node to disappear/appear with a frequency.
message FlashAnimation {
  optional int32 delay = 1;
  optional int32 repeat = 2;
}

// Animation that will move a scene node to the destination with a specified
// step size. The animation is not repeatable. When scene node reaches the
// destination, the animation finishes.
message GotoAnimation {
  optional Vector destination = 1;
  optional double step = 2;
  optional int32 delay = 3;
}

// Non-visual animation that can be used as a time-buffer between other actions
// in the game.
message TimerAnimation {
  optional int32 delay = 1;
}

// Executes a script referenced by its id. This can be used for composing more
// complex animations from simpler ones.
message RunScriptAnimation {
  optional string script_id = 1;
}

// Play audio in sync with other animations.
message SfxAnimation {
  optional Audio audio = 1;
  optional int32 repeat = 2;
}
